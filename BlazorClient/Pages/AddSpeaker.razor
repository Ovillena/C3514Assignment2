@page "/addspeaker"
@inject HttpClient httpClient
@inject NavigationManager UriHelper

<h1>Add Speaker</h1>
<button class="btn btn-success btn-sm" @onclick=@Navigate>Back</button>

<EditForm Model="@speaker" OnValidSubmit="@HandleAdd">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText placeholder="First Name" id="firstName" @bind-Value="@speaker.FirstName" />
    <br />
    <InputText placeholder="Last Name" id="lastName" @bind-Value="@speaker.LastName" />
    <br />
    <InputText placeholder="Email" id="Email" @bind-Value="@speaker.Email" />
    <br />
    <InputText placeholder="Mobile Number" id="MobileNumber" @bind-Value="@speaker.MobileNumber" />
    <br />
    <InputText placeholder="Area of Specialization" id="Specialization" @bind-Value="@speaker.Specialization" />
    <br />
    <InputText placeholder="City of Residence" id="City" @bind-Value="@speaker.City" />
    <br />
    <InputText placeholder="Province of Residence" id="Province" @bind-Value="@speaker.Province" />
    <br />
    <InputText placeholder="Employer" id="Employer" @bind-Value="@speaker.Employer" />
    <br />
    <button type="submit">Submit</button>
</EditForm>


@code { private Speaker speaker = new Speaker();

    private async void HandleAdd()
    {
        string endpoint = $"{baseUrl}api/speakers";

        speaker.SpeakerId = Guid.NewGuid().ToString();

        await httpClient.PostAsJsonAsync(endpoint, speaker);
        await load();
        StateHasChanged(); // causes the page to get automatically refreshed
        Navigate(); //goes back to home page
    }

    Speaker s;

    Speaker[] speakers;
    string baseUrl = "https://localhost:6001/";

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        speakers = await httpClient.GetFromJsonAsync<Speaker[]>($"{baseUrl}api/speakers");
    }

    void Navigate()
    {
        UriHelper.NavigateTo("/"); // goes back to home page
    } }
